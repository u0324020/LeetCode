'''
Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example 1:

Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,0,1,1,1,2,2,3,3,4],

Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.

It doesn't matter what values are set beyond the returned length.
'''
class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if nums == []:
            return 0
        ans_len = 1 #return值為nums答案的長度。預設1，因為第一個值一定是存在return的值
        for i in range(1,len(nums)):
            if nums[i] != nums[i-1]:#因為是sorted的array，所以隔壁如果不同就代表是新的元素
                nums[ans_len] = nums[i]#如果是新的元素就複製該值到ans_len的位置中
                ans_len+=1#答案的位置增長
        return ans_len
