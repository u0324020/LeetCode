'''
Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Constraint: It's guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.

Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)
'''
class Solution(object):
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        length = len(nums)
        answer = [0]*length
        answer[0] = 1
        for i in range(1, length):#左邊乘績
            answer[i] = nums[i - 1] * answer[i - 1]
        R = 1;
        for i in reversed(range(length)): #for i in reversed(...)反序
            answer[i] = answer[i] * R #右邊乘績
            R *= nums[i]
            print(R, answer[i])
        
        return answer
