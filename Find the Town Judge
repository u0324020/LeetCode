'''
In a town, there are N people labelled from 1 to N.  There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.

If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return -1.

 

Example 1:

Input: N = 2, trust = [[1,2]]
Output: 2
Example 2:

Input: N = 3, trust = [[1,3],[2,3]]
Output: 3
Example 3:

Input: N = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1
Example 4:

Input: N = 3, trust = [[1,2],[2,3]]
Output: -1
Example 5:

Input: N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]
Output: 3
 

Note:

1 <= N <= 1000
trust.length <= 10000
trust[i] are all different
trust[i][0] != trust[i][1]
1 <= trust[i][0], trust[i][1] <= N
'''
class Solution:
    def findJudge(self, N: int, trust: List[List[int]]) -> int:
        #Town有N個人
        #投票給(b)的人(a)要剛好=N-1
        #(b)不能投給任何人
        #用一個Array的方法 分別去紀錄投票與被投票的動作
        #N-1的那個投票率就是答案
        if len(trust)<N-1:
            return -1
        
        scores = [0]*(N+1)
        
        for i, j in trust:
            scores[i] -=1
            scores[j] +=1
        for k, score in enumerate(scores[1:],1):#1-N
            if score == N-1:
                return k
        return -1
