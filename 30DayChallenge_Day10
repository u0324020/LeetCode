'''
Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree 

          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.
'''
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def diameterOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        #Time = O(N) , Space = O(N)
        self.ans = 1 #在Class設定一個ans變數
        def depth(node): #新增一個找深度的Function
            if not node:
                return 0
            L = depth(node.left) #用遞迴的找左邊跟右邊
            R = depth(node.right)
            self.ans = max(self.ans,L+R)#找最深的
            #print(self.ans, L,R,L+R)
            #print(max(L,R)+1)
            return max(L,R)+1
        
        if not root:
            return 0
        elif not root.left and not root.right:
            return 0
        else:
            depth(root)#從最深的點開始往上找
            return self.ans
