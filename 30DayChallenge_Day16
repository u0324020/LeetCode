'''
Given a string containing only three types of characters: '(', ')' and '*', write a function to check whether this string is valid. We define the validity of a string by these rules:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string.
An empty string is also valid.
Example 1:

Input: "()"
Output: True
Example 2:

Input: "(*)"
Output: True
Example 3:

Input: "(*))"
Output: True
Note:

The string size will be in the range [1, 100].
'''
class Solution(object):
    def checkValidString(self, s):
        """
        :type s: str
        :rtype: bool
        """
        #Ans1
        fornt = 0
        back = 0
        for i in s:
            if i == '(':
                fornt+=1
            else:
                fornt-=1
            if i != ')':
                back+=1
            else:
                back-=1
            if back < 0:
                break
            fornt = max(fornt,0)
        return fornt == 0
        
        #Ans of mine
        # if s == "":
        #     return 1
        # else:
        #     if '*' in s:
        #         return 1
        #     else:
        #         s=s.replace('()','')
        #         print(s)
        #         if s.count('(') == s.count(')'):
        #             print(s[(len(s))/2:])
        #             if (s[:(len(s))/2].count(')')) != 0 or (s[(len(s))/2:].count('(')) != 0:
        #                 return 0
        #             else:
        #                 return 1
        #         else:
        #             return 0
                    
