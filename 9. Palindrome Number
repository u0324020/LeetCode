'''
Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.

Example 1:

Input: 121
Output: true
Example 2:

Input: -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
Follow up:

Coud you solve it without converting the integer to a string?
'''
class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        num = 0
        a = abs(x)
        while(a!=0):
            temp = a%10
            num = num*10 + temp
            a = a //10
        if x >= 0 and x == num:
            return 1
        else:
            return 0
        #單數中間不管 雙數要一樣 -就是錯的
        # if x == None or x<0:
        #     return 0
        # elif x == 0:
        #     return 1
        # else:
        #     A = []
        #     A = map(int,str(x))
        #     half = []
        #     if len(A)%2 == 0:
        #         B = len(A)/2
        #     else:
        #         B = (len(A)/2)+1
        #     half = A[0:len(A)/2]
        #     half = half[::-1]
        #     if half == A[B:]:
        #         return 1
        
