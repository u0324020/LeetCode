'''
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
'''
class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        a = max(nums)
        if a < 0:
            return a
        #3 - Dynamic Programming (Kadane's algorithm) Time Complexity = O(n), Space complexity = O(1)
        ans = nums[0]
        for i in range(1,len(nums)):
            if nums[i-1]>0:
                nums[i]+=nums[i-1]
            ans = max(nums[i],ans)
        return ans
        # #2 - Greedy Time Complexity = O(n), Space complexity = O(1)
        # a, b = 0,0
        # for i in nums:
        #     a = max(0,a+i)
        #     b = max(a,b)
        # return b
        #1- ERROR Because Time = O(n^2)
        # arr = []
        # arr.append(a)
        # for i in range(len(nums)):
        #     temp = 0
        #     for j in range(i,len(nums)):
        #         temp+=nums[j]
        #         if temp>a and temp>max(arr):
        #             arr.append(temp)
        #         else:
        #             pass
        # return max(arr)
