'''
We have a collection of stones, each stone has a positive integer weight.

Each turn, we choose the two heaviest stones and smash them together.  Suppose the stones have weights x and y with x <= y.  The result of this smash is:

If x == y, both stones are totally destroyed;
If x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.
At the end, there is at most 1 stone left.  Return the weight of this stone (or 0 if there are no stones left.)

 

Example 1:

Input: [2,7,4,1,8,1]
Output: 1
Explanation: 
We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of last stone.
'''
class Solution(object):
    def lastStoneWeight(self, stones):
        """
        :type stones: List[int]
        :rtype: int
        """
        #Ans1(Mine)
        # if len(stones)<2:
        #     return stones[0]
        # s = sorted(stones)
        # for i in range(len(s)-2,0,-1):
        #     a = s[i+1]
        #     b = s[i]
        #     s.pop(i+1)
        #     s.pop(i)
        #     s.append(a-b)
        #     s = sorted(s)
        #     print(s)
        # return s[1]-s[0]
        #Ans2
        while(len(stones)>1):
            print(stones)
            stones=sorted(stones,reverse=True)
            if(stones[0]==stones[1]):
                stones.pop(0)
                stones.pop(0)
            else:
                stones.append(stones[0]-stones[1])
                stones.pop(0)
                stones.pop(0)
            
        
        if(len(stones)):
            return stones[0]
        return 0
