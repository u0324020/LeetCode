'''
Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.

Example 1:

Input: [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.
Example 2:

Input: [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.
Note: The length of the given binary array will not exceed 50,000.
'''
class Solution(object):
    def findMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        #rep = [-1 if x == 0 else x for x in nums] #Replace of list
        #print(rep)
        #ANS1 -> Time Limit Exceeded -> O(N^2)
        # ans = 0
        # for i in range(len(nums)):
        #     z = 0
        #     one = 0
        #     for j in range(i,len(nums)):
        #         if nums[j]==0:
        #             z+=1
        #         else:
        #             one+=1
        #         if z==one:
        #             ans = max(ans,j-i+1)
        # return ans
        #ANS2
        q = {}#dict
        q[0] = -1
        num01 = 0
        ans = 0
        for i in range(len(nums)):
            if nums[i]:
                num01-=1
            else:
                num01+=1
            if num01 in q:
                ans = max(ans,i-q[num01])
            else:
                q[num01] = i
        return ans
